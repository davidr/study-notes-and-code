#+TITLE: Haskell Programming from First Principles Chapter 9 notes/answers
#+NAME: David Ressman
#+EMAIL: davidr@ressman.org
#+LANGUAGE: en
#+STARTUP: indent
#+OPTIONS: num:nil toc:1
#+PROPERTY: header-args:haskell :cache yes :results verbatim :exports both
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-dark.min.css" />

* 9.1 Lists
* 9.2 The list datatype

The list datatype is defined like: ~data [] a = [] | a : [a]~. Sum datatypes haven't been introduced
yet.

* 9.3 Pattern matching on lists

Naive pattern matching on lists doesn't take into account an empty list, so Maybe is needed:

#+BEGIN_SRC haskell :tangle safetail.hs
  safeTail         :: [a] -> Maybe [a]
  safeTail []      = Nothing
  safeTail (x:[])  = Nothing
  safeTail (_:xs)  = Just xs
#+END_SRC

* 9.4 List's syntactic sugar

Note that
#+BEGIN_SRC haskell
[1, 2, 3] ++ [4]
#+END_SRC

is identical to

#+BEGIN_SRC haskell
(1 : 2 : 3 : []) ++ 4 : []
#+END_SRC

When talking of lists, some terms:

** "cons cells"
cons cells are the list datatype's second constructor, ~a : [a]~, the result of recursively prepending
a value to "more list". The cons cell is a conceptual space that values may inhabit.

** spine
spine is the connective structure that holds the cons cells together and in place

* 9.5 Using ranges to construct lists

#+BEGIN_SRC haskell
[1,3..10]

-- is the same as

enumFromThenTo 1 3 10
#+END_SRC

for all instances of the Enum typeclass

** Exercise: EnumFromTo

I think I probably misunderstood what this question was asking for. They wanted functions for
all four types, Bool, Ordering, Int, Char, but they're all instances of the Enum and Eq
typeclasses, so the eftEnumEq function seems to do what I think they're asking for, but then I
don't understand why they asked for all four. I assume I misunderstood.

#+BEGIN_SRC haskell :tangle 9.5-enumFromTo.hs
  eftEnumEq :: (Enum a, Eq a) => a -> a -> [a]
  eftEnumEq start stop = go start stop []
    where go curr stop retlist
           | curr == stop  = retlist ++ [curr]
           | otherwise     = go (succ curr) stop (retlist ++ [curr])

  eftBool :: Bool -> Bool -> [Bool]
  eftBool  = eftEnumEq

  eftOrd :: Ordering -> Ordering -> [Ordering]
  eftOrd  = eftEnumEq

  eftInt :: Int -> Int -> [Int]
  eftInt =  eftEnumEq

  eftChar :: Char -> Char -> [Char]
  eftChar  = eftEnumEq
#+END_SRC

* 9.6 Extracting portions of lists

~take n a~ returns the first n elements of List a as a list

~drop n a~ returns the last (length a) - n elements of List a as a list (i.e. drops the first n elements and
returns the remaining ones)

~splitat n a~ returns two-tuple of lists from list a, split at the nth position

takeWhile and dropWhile do similar things, but as higher-order functions with ~a -> Bool~ "selection" functions
as arguments:

#+BEGIN_EXAMPLE
Prelude> takeWhile (=='a') [a..z]
"a"
#+END_EXAMPLE

** Exercises: Thy Fearful Symmetry

*** 1.

My solution seems needlessly complicated. There's probably a solution that involves not having
to use both dropWhile and takeWhile in the same go statement

#+BEGIN_SRC haskell :tangle 9.6.symmetry01.hs
  myWords :: [Char] -> [[Char]]
  myWords sentence = go sentence []
    where go sentence retwords
           | length sentence > 0 = go (drop 1 $ dropWhile (/=' ') sentence)
                                      (retwords ++ [takeWhile (/=' ') sentence])
           | otherwise           = retwords
#+END_SRC

*** 2.

#+BEGIN_SRC haskell :tangle 9.6.symmetry02.hs
  module PoemLines where

  firstSen = "Tyger Tyger, burning bright\n"
  secondSen = "In the forests of the night\n"
  thirdSen = "What immortal hand or eye\n"
  fourthSen = "Could frame thy fearful\
              \ symmetry?"
  sentences = firstSen ++ secondSen
           ++ thirdSen ++ fourthSen

  -- putStrLn sentences -- should print
  -- Tyger Tyger, burning bright
  -- In the forests of the night
  -- What immortal hand or eye
  -- Could frame thy fearful symmetry?


  -- Implement this
  myLines :: String -> [String]
  myLines longstring = go longstring []
    where go longstring lines
           | length longstring > 0 = go (drop 1 $ dropWhile (/='\n') longstring)
                                        (lines ++ [takeWhile (/='\n') longstring])
           | otherwise             = lines

  -- What we want 'myLines sentences' to equal
  shouldEqual =
    [ "Tyger Tyger, burning bright"
    , "In the forests of the night"
    , "What immortal hand or eye"
    , "Could frame thy fearful symmetry?"
    ]

  -- The main function here is a small test to ensure you've written your function
  -- correctly.
  main :: IO ()
  main =
    print $
    "Are they equal? "
    ++ show (myLines sentences
             == shouldEqual)
#+END_SRC

*** 3. Left as an exercise to the reader's reader.

* 9.7 List comprehensions

#+BEGIN_EXAMPLE
[ x^2 | x <- [1..10]]
#+END_EXAMPLE

 or with predicates:

#+BEGIN_EXAMPLE
[x^2 | x <- [1..10], rem x 2 == 0]
#+END_EXAMPLE

multiple generators:

#+BEGIN_EXAMPLE
[x^y | x <- [1..5], y <- [2,3]]
#+END_EXAMPLE

multiple predicates!:

#+BEGIN_EXAMPLE
[x^y |
 x <- [1..5],
 y <- [2, 3],
 x^y < 200]
#+END_EXAMPLE

it can zip up multiple generators of different lengths and types into tuples:

#+BEGIN_EXAMPLE
Prelude> :{
Prelude| [(x, y) |
Prelude| x <- [1, 2, 3],
Prelude| y <- [6, 7]]
Prelude| :}
[(1,6),(1,7),(2,6),(2,7),(3,6),(3,7)]
#+END_EXAMPLE

** Exercises: Comprehend Thy Lists

#+BEGIN_EXAMPLE
-- let mySqr = [x^2 | x <- [1..10]]    == [1,4,9,16,25,36,49,64,81,100]

[x | x <- mySqr, rem x 2 == 0] == [4,16,36,64,100]
[(x, y) | x <- mySqr, y <- mySqr, x < 50, y > 50]
...
#+END_EXAMPLE

** Exercises: Square Cube

#+BEGIN_SRC haskell :tangle 9.7-square-cube.hs
mySqr  = [x^2 | x <- [1..5]]
myCube = [x^3 | x <- [1..5]]

myTuples = [(x, y) | x <- mySqr, y <- myCube]

myTuplesLtFifty = [(x, y) | x <- mySqr, y <- myCube, x < 50 && y < 50]
#+END_SRC
* 9.8 Spines and nonstrict evaluation

** Exercises: Bottom Madness

*** 1. ~[x^y | x <- [1..5], y <- [2, undefined]]~
will bottom, as x^undefined is evaluated

*** 2. ~take 1 $ [x^y | x <- [1..5], y <- [2, undefined]]~
will return ~[1]~, because only the first cons cell is evaluated, which is 1^2=1

*** 3. ~sum [1, undefined, 3]~
will bottom since all the cons cells are evaluated in the summation

*** 4. ~length [1, 2, undefined]~
will return 3 because only the spine is evaluated (is "evaluated" the right word?)

*** 5. ~length $ [1, 2, 3] ++ undefined~
will bottom, I think because you can't add an element to a list. adding [undefined] to this
would make it work.

*** 6. ~take 1 $ filter even [1, 2, 3, undefined]~
will return ~[2]~ because the filter evaluation stops when the first even number, 2 is found

*** 7. ~take 1 $ filter even [1, 3, undefined]~
will bottom as all cons cells are evaluated trying to find the not present even value

*** 8. ~take 1 $ filter odd [1, 3, undefined]~
will return ~[1]~. See (6) above

*** 9. ~take 2 $ filter odd [1, 3, undefined]~
will return ~[1, 3]~ for the same reason as (6) and (8) above

*** 10. ~take 3 $ filter odd [1, 3, undefined]~
will bottom. see (7) above

** Intermission: Is it in normal form?

Are the following in normal form (NF), weak head normal form (WHNF), or nothing

*** 1. ~[1, 2, 3, 4, 5]~
normal form

*** 2. ~1 : 2 : 3 : 4 : _~
whnf. the spine is fully evaluated, but the last cons cell is still unevaluated

*** 3. ~enumFromTo 1 10~
nothing. the outermost component of this expression is an unapplied function evaluation

*** 4. ~length [1, 2, 3, 4, 5]~
nothing. same as (3)

*** 5. ~sum (enumFromTo 1 10)~
nothing. same as (3) and (4)

*** 6. ~['a'..'m'] ++ ['n'..'z']~
nothing. same as (3), (4), and (5)

*** 7 ~(_, b)~
I think it's whnf, but @larrybotha thinks it's nf and he's smarter than me. TODO - look into
this

* 9.9 Transforming lists of values

** Exercises: More Bottoms:

*** 1

#+BEGIN_SRC haskell
take 1 $ map (+1) [undefined, 2, 3]
#+END_SRC

Will bottom because it will evaluate (+) 1 undefined

*** 2

#+BEGIN_SRC haskell
take 1 $ map (+1) [1, undefined, 3]
#+END_SRC

Will return 2

*** 3

#+BEGIN_SRC haskell
take 2 $ map (+1) [1, undefined, 3]
#+END_SRC

Will bottom, for the same reason as (1)

*** 4

#+BEGIN_SRC haskell
itIsMystery xs =
  map (\x -> elem x "aeiou") xs
#+END_SRC

Maps a function that does a boolean check for whether an element of the list ~xs~ is in the
list "aeiou" over xs. (returns [Bool])

*** 5
**** a

#+BEGIN_SRC haskell
map (^2) [1..10]
#+END_SRC

#+RESULTS[85aa06917ddf9d8090f6b1cb5547bbd37093888c]:
: [1,4,9,16,25,36,49,64,81,100]


**** b

#+BEGIN_SRC haskell
map minimum [[1..10], [10..20], [20..30]]
#+END_SRC

#+RESULTS[d5efd2c2622979f6e7b00700761d6368a612e627]:
: [1,10,20]

**** c

#+BEGIN_SRC haskell
map sum [[1..5], [1..5], [1..5]]
#+END_SRC

#+RESULTS[5212c673827215dd207e76a7d3806b241befc3ff]:
: [15,15,15]

*** 6

#+BEGIN_SRC haskell :tangle 9.9-map-implemented-with-bool.hs
  -- the bool funciton lives in Data.Bool
  import Data.Bool

  map (\x -> bool x (-x) (x == 3)) [1..10]
#+END_SRC

#+RESULTS[355cc6e0a84154ddcb40314afca366b28f5e2f9c]:
: Prelude Data.Bool> Prelude Data.Bool> [1,2,-3,4,5,6,7,8,9,10]

* 9.10 Filtering lists of values

note filter's definition:

#+BEGIN_SRC haskell
filter :: (a -> Bool) -> [a] -> [a]
filter _ [] = []
filter pred (x:xs)
  | pred x = x : filter pred xs
  | otherwise = filter pred xs
#+END_SRC

#+BEGIN_SRC haskell
filter (== 'a') "abracadabra"
#+END_SRC

#+RESULTS[3dc24df321eef540f644525f2140a4c3076e96f7]:
: aaaaa

#+BEGIN_SRC haskell
filter (\x -> (rem x 2) == 0) [1..20]
#+END_SRC

#+RESULTS[b2c99441965c4ae73baea9e170aeda2b717c67fc]:
: [2,4,6,8,10,12,14,16,18,20]

/note/: I wonder why they use ~rem x 2 == 0~ so consistently in this book as opposed to ~mod x 2 == 0~
which I feel like is more common. Is rem more efficient? That seems unlikely.

** Exercises: filtering

*** 1

give all multiples of 3 out of a list from 1 to 30:

#+BEGIN_SRC haskell
filter (\x -> (mod x 3) == 0) [1..30]
#+END_SRC

#+RESULTS[cfa4b7099b80ee43f9def7b35a636cf8200fa17b]:
: [3,6,9,12,15,18,21,24,27,30]

*** 2

how many multiples of three are there in (1) above? answer using (.)

#+BEGIN_SRC haskell
length . filter (\x -> (mod x 3) == 0) $ [1..30]
#+END_SRC

#+RESULTS[13869d29ec10e09b124f3b2930575bd082a6df2b]:
: 10

*** 3

remove all articles from sentences

#+BEGIN_SRC haskell
-- start with a list of articles we can check words against
let articles = ["the", "a", "an"]

filter (\x -> not (elem x articles)) $ words "the brown dog was a goof"
#+END_SRC

#+RESULTS[443bfbe90f1da8eb24b2b234887ef81d6fc45af0]:
: ["brown","dog","was","goof"]

* 9.11 Zipping lists

Note: zip always ends with the exhaustion of the shorter list

~zip :: [a] -> [b] -> [(a, b)]~

~zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]~

zipWith examples:

#+BEGIN_SRC haskell
zipWith (+) [1, 2, 3] [10, 11, 12]
#+END_SRC

#+RESULTS[8aca4ee3a6a5ce1c8c782762820afa8d697b9c35]:
: [11,13,15]

#+BEGIN_SRC haskell
zipWith (==) ['a'..'f'] ['a'..'z']
#+END_SRC

#+RESULTS[a0452b3c7827afa0a3e342f5f442394ae6624691]:
: [True,True,True,True,True,True]

** Zipping exercises

*** 1

Write your own version of zip

#+BEGIN_SRC haskell
myZip :: [a] -> [b] -> [(a, b)]
myZip _ [] = []
myZip [] _ = []
myZip (x:xs) (y:ys) = (x, y) : myZip xs ys
#+END_SRC

*** 2

same with zipWith

#+BEGIN_SRC haskell
myZipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
myZipWith _ _      []     = []
myZipWith _ []     _      = []
myZipWith f (x:xs) (y:ys) = (f x y) : myZipWith f xs ys
myZipWith (+) [1..3] [11..13]
#+END_SRC

*** 3

rewrite myZip with myZipWith

#+BEGIN_SRC haskell
someNums = [1..10]
someLetts = ['a'..'d']

myZipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
myZipWith _ _      []     = []
myZipWith _ []     _      = []
myZipWith f (x:xs) (y:ys) = (f x y) : myZipWith f xs ys

myZip :: [a] -> [b] -> [(a, b)]
myZip xs ys = myZipWith (,) xs ys

myZip someNums someLetts
#+END_SRC

* 9.12 Chapter Exercises

** Data.Char

*** 1

#+BEGIN_SRC haskell
import Data.Char
:t isUpper
#+END_SRC

#+RESULTS[725d00c83ac149d082c9e9e90f7eeec48626a9cd]:
: isUpper :: Char -> Bool

#+BEGIN_SRC haskell
import Data.Char
:t toUpper
#+END_SRC

#+RESULTS[efa34236e854eabf9fe155f60ec91b328f4422f4]:
: toUpper :: Char -> Char

*** 2

use isUpper for a filter statement

*** 3

#+BEGIN_SRC haskell
import Data.Char

capString :: String -> String
capString (x:xs) = toUpper x : xs

capString "julie"
#+END_SRC

#+RESULTS[f3aeaf3ec8c87458ba4082d76705762b79cd4c66]:
: Prelude Data.Char> "Julie"

*** 4

make a recursive case of (3) above to change all letters to caps

#+BEGIN_SRC haskell
  import Data.Char

  capAllString :: String -> String
  capAllString []     = []
  capAllString (x:xs) = toUpper x : capAllString xs

  capAllString "woot"
#+END_SRC

#+RESULTS[ead3229e241791794d9318cd7d172e6bb9f73627]:
: Prelude Data.Char> "WOOT"

*** 5

#+BEGIN_SRC haskell
:t head
#+END_SRC

#+RESULTS[11b13bce0bbdd8198549473af1d75ca2462d2e74]:
: head :: [a] -> a

Simple function:

#+BEGIN_SRC haskell
import Data.Char

capHead :: String -> Char
capHead s = toUpper (head s)

capHead "julie"
#+END_SRC

#+RESULTS[f822c319f3f09032b7415aaacf205d7adaf30699]:
: Prelude Data.Char> 'J'

*** 6

With function composition:

#+BEGIN_SRC haskell
import Data.Char

capHead :: String -> Char
capHead s = toUpper . head $ s

capHead "julie"
#+END_SRC

#+RESULTS[d1e16dd094c8b2456c7df68cb9785309452f03d4]:
: Prelude Data.Char> 'J'

As pointfree:

#+BEGIN_SRC haskell
import Data.Char

capHead = toUpper . head

capHead "julie"
#+END_SRC

#+RESULTS[51c3f022b6f2eb038819dc81105c83ec9d17e06c]:
: Prelude Data.Char> 'J'

** Ciphers

Todo: this should handle caps

#+BEGIN_SRC haskell :tangle cipher.hs
  module Cipher where

  import Data.Char

  -- alphaBase should really be determined upper and lower case
  alphaBase = ord 'a'

  -- base function to shift chars either up or down depending on supplied function f
  charShift :: Int -> Char -> Char
  charShift n c
    | isUpper c = chr $ (ord 'A') + (mod (((ord c) - (ord 'A')) + n) 26)
    | otherwise = chr $ (ord 'a') + (mod (((ord c) - (ord 'a')) + n) 26)

  caesar :: Int -> String -> String
  caesar _ []     = []
  caesar n (x:xs) = charShift n x : caesar n xs

  unCaesar :: Int -> String -> String
  unCaesar _ []     = []
  unCaesar n (x:xs) = charShift (negate n) x : unCaesar n xs
#+END_SRC
