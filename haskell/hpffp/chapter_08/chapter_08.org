* 8.1 Recursion
* 8.2 Factorial

Note the base case ~n = 0~ for this working factorial funciton

#+BEGIN_SRC haskell :tangle factorial.hs
  module Factorial where

  factorial :: Integer -> Integer
  factorial 0 = 1
  factorial n = n * factorial (n - 1)
#+END_SRC

Another way to look at it is as self-referential function composition, ~f . f . f, ..., f~
for a function ~f~

** Exercise:

#+BEGIN_SRC haskell
applyTimes 5 (+1) 5
-- (+1) (applyTimes 4 (+1) 5)
-- (+1) ((+1) applyTimes 3 (+1) 5)
-- (+1) (((+1) applyTimes 2 (+1) 5 ))
...
#+END_SRC

* 8.3 Bottom

note: they say that `let x = x in x` should give an exception, but it doesn't in my 8.2.2 version, although it
doesn't consume any resources either

If we take a partial function like:

#+BEGIN_SRC haskell
f :: Bool -> Int
f False = 0
#+END_SRC

It will throw an exception (or "bottom"?) when run with ~f True~, but we can turn it into a total
function with ~Maybe~ and ~Just~:

#+BEGIN_SRC haskell
f :: Bool -> Maybe Int
f False = Just 0
f _     = Nothing
#+END_SRC

which are provided without explanation, though is promised later

* Fibonacci

Everyone's favorite interview question!

#+BEGIN_EXAMPLE
fib 1 = 1
fib 2 = 1
fib n = fib n-2 + fib n-1
#+END_EXAMPLE


** Type

#+BEGIN_SRC haskell
fibonacci :: Integer -> Integer
-- or
fibonacci :: Integral a => a -> a
#+END_SRC

** Base case

#+BEGIN_SRC haskell
fibonacci  :: Integral a => a -> a
fibonacci 0 = 0
fibonacci 1 = 1
#+END_SRC

** Arguments

#+BEGIN_SRC haskell
fibonacci  :: Integral a => a -> a
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci x = (x - 1) (x - 2)
-- note: doesn't work yet
#+END_SRC

** Consider the recursion

#+BEGIN_SRC haskell :tangle fibonacci.hs
fibonacci  :: Integral a => a -> a
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 2) + fibonacci (n - 1)
#+END_SRC

* 8.5 Integer division from scratch

We'll make an integer division from subtraction operations

** Types

#+BEGIN_SRC haskell
dividedBy :: Integral a => a -> a -> a
dividedBy = div
#+END_SRC

or

#+BEGIN_SRC haskell
type Numerator   = Integer
type Denominator = Integer
type Quotient    = Integer

dividedBy :: Numerator -> Denominator -> Quotient
dividedBy  = div
#+END_SRC

(We expect this to change as we examine base case, etc.)

** Base case

For even division, we'll know when to stop because subtracting denominator from numerator quotient times
will yield 0

For division with remainder, subtracting denominator from numerator quotient times will yield sum number
smaller than denominator, so returning a 2-tuple is what we want if we don't want to implement floor
division

#+BEGIN_SRC haskell :tangle dividedby.hs
  dividedBy :: Integral a => a -> a -> (a, a)
  dividedBy num denom = go num denom 0
    where go n   d count
           | n < d     = (count, n)
           | otherwise = go (n - d) d (count + 1)
#+END_SRC

note: we've started using a ~go/where~ function.

* 8.6 Chapter Exercises

** 1.
The type of ~[[True, False], [True, True], [False, True]]~ is d) ~[[Bool]]~

** 2.
The type of the above is the same as the type of b) ~[[3 == 3], [6 > 5], [3 < 4]]~

** 3.
Given:

#+BEGIN_SRC haskell
func    :: [a] -> [a] -> [a]
func x y = x ++ y
#+END_SRC

d) all of the above are true (x, y must be same type; x, y must be lists; if x is ~String~, y must be ~String~

** 4.
only b) ~func "Hello" "World" is valid

** Reviewing currying

filling in the types:

#+BEGIN_SRC haskell
  cattyConny :: String -> String -> String
  cattyConny x y = x ++ " mrow " ++ y

  flippy :: String -> String -> String
  flippy = flip cattyConny

  appedCatty :: String -> String
  appedCatty = cattyConny "woops"

  frappe :: String -> String
  frappe = flippy "haha"
#+END_SRC

*** 1.
"woops mrow woohoo!"

*** 2.
"1 mrow haha"

*** 3.
"woops mrow 2 mrow haha"
...

** Recursion

*** 2.

A function that recusively sums all numbers from 1 to n

#+BEGIN_SRC haskell :tangle 8.6-recursion-02.hs
recurseSum :: (Eq a, Num a) => a -> a
recurseSum n
  | n == 1    = 1
  | otherwise = n + recurseSum (n - 1)
#+END_SRC

*** 3.

A function that multiplies two integral numbers using recursive summation

#+BEGIN_SRC haskell :tangle 8.6-recursion-03.hs
multTheHardWay :: (Integral a) => a -> a -> a
multTheHardWay x y = go x y 0
  where go x y sum
         | y == 0     = sum
         | otherwise = go x (y - 1) (sum + x)
#+END_SRC

** Fixing dividedBy

to handle divisors <= 0, we need to make some changes

#+BEGIN_SRC haskell :tangle 8.6-dividedby-fixed.hs
  data DividedResult = Result (Integer, Integer) | DividedByZero deriving Show

  dividedBy :: Integer -> Integer -> DividedResult
  dividedBy num denom = go num denom 0 1
    where go n d count sign
           | d == 0          = DividedByZero
           | n < 0 && d < 0  = go (abs n) (abs d) 0   1
           | n < 0 || d < 0  = go (abs n) (abs d) 0 (-1)
           | n < d           = Result (sign * count, sign * n)
           | otherwise       = go (n - d) d (count + 1) sign
#+END_SRC

** McCarthy 91 function

#+BEGIN_SRC haskell :tangle 8.6-mccarthy-91.hs
mc91 :: Integral a => a -> a
mc91 n
  | n >  100  = n - 10
  | otherwise = mc91 . mc91 $ n + 11
#+END_SRC

** Numbers into words

#+BEGIN_SRC haskell :tangle 8.6-numbers-into-words.hs
  module WordNumber where

  import Data.List (intersperse)

  digitToWord :: Int -> String
  digitToWord n
    | n == 0    = "oh"
    | n == 1    = "one"
    | n == 2    = "two"
    | n == 3    = "three"
    | n == 4    = "four"
    | n == 5    = "five"
    | n == 6    = "six"
    | n == 7    = "seven"
    | n == 8    = "eight"
    | n == 9    = "nine"
    | otherwise = "UNDEFINED"

  digits :: Int -> [Int]
  digits n = go n []
    where go n ns
           | n < 10    = n :[] ++ ns
           | otherwise = go (div n 10) ((mod n 10) :[] ++ ns)

  wordNumber :: Int -> String
  wordNumber n =
    concat $ intersperse "-" (map digitToWord (digits n))

#+END_SRC

Keeping track of the stuff in that dense wordnumber line:

#+BEGIN_EXAMPLE
ns                                             - [1, 2, 3]
wordlist = map digitToWord ns                  - ["one", "two", "three"]
wordswithhyphen = intersperse "-" wordlist     - ["one", "-", "two", "-", "three"]
concat wordswithhyphen                         - "one-two-three"
#+END_EXAMPLE
