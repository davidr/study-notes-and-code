* 7.3 Anonymous Functions
** Grab bag
*** 1
These are all equivalent

#+BEGIN_SRC haskell
mTh x y z = x * y * z
mTh x y = \z -> x * y * z
mTh x = \y -> \z -> x * y * z
mTh = \x -> \y -> \z -> x * y * z
#+END_SRC
*** 2

~mTh 3~ is of type ~Num a => a -> a -> a~
*** 3

**** a)
Given:
#+BEGIN_SRC haskell
addOneIfOdd n = case odd n of
  True -> f n
  False -> n
  where f n = n + 1
#+END_SRC

Rewrite to:
#+BEGIN_SRC haskell
addOneIfOdd n = case odd n of
  True -> f n
  False -> n
  where f = \x -> x + 1
#+END_SRC

**** b)
Given:
#+BEGIN_SRC haskell
addFive x y = (if x > y then y else x) + 5
#+END_SRC

Rewrite to:
#+BEGIN_SRC haskell
addFive = \x -> \y -> (if x > y then y else x) + 5
#+END_SRC

**** c)
Given:
#+BEGIN_SRC haskell
mflip f = \x -> \y -> f y x
#+END_SRC

Rewrite to:
#+BEGIN_SRC haskell
mflip f x y = f y x
#+END_SRC
* 7.4 Pattern Matching

** Notes
Pattern matching in data constructors:

#+BEGIN_SRC haskell
  data WherePenguinsLive =
      Galapagos
    | Antarctica
    | Australia
    | SouthAfrica
    | SouthAmerica
    deriving (Eq, Show)

  data Penguin =
    Peng WherePenguinsLive
    deriving (Eq, Show)

  isSouthAfrica' :: WherePenguinsLive -> Bool
  isSouthAfrica' SouthAfrica = True
  isSouthAfrica' _           = False

  gimmeWhereTheyLive :: Penguin -> WherePenguinsLive
  gimmeWhereTheyLive (Peng whereitlives) =
    whereitlives

  galapagosPenguin :: Penguin -> Bool
  galapagosPenguin (Peng Galapagos) = True
  galapagosPenguin _                = False

  antarcticPenguin :: Penguin -> Bool
  antarcticPenguin (Peng Antarctica) = True
  antarcticPenguin _                 = False

  antarcticOrGalapagos :: Penguin -> Bool
  antarcticOrGalapagos p =
       (galapagosPenguin p)
    || (antarcticPenguin p)

#+END_SRC

Pattern matching tuples

recall this from earlier type-kwon-do exercises:

#+BEGIN_SRC haskell
f :: (a, b) -> (c, d) -> ((b, d), (a, c))
f x y = ((snd x, snd y), (fst x, fst y))
#+END_SRC

this can be rewritten more cleanly as:

#+BEGIN_SRC haskell
f :: (a, b) -> (c, d) -> ((b, d), (a, c))
f (a, b) (c, d) = ((b, d), (a, c))
#+END_SRC

** Grab bag
*** 1

Given:

#+BEGIN_SRC haskell
k (x, y) = x
k1 = k ((4-1), 10)
k2 = k ("three", (1 + 2))
k3 = k (3, True)
#+END_SRC

**** a)
k is of type ~k :: (a, b) -> a~

**** b)
k2 is of type ~[Char]~

**** c)
k3 = 3

*** 2.
#+BEGIN_SRC haskell
  -- Remember: Tuples have the same syntax for their
  -- type constructors and
  -- their data constructors.

  f :: (a, b, c)
    -> (d, e, f)
    -> ((a, d), (c, f))

  f (a, b, c) (d, e, f) =
    ((a, d), (c, f))
#+END_SRC

* 7.5 Case Expressions

** Ex, Case Practice
*** 1.

Given:
#+BEGIN_SRC haskell
functionC x y = if (x > y) then x else y
#+END_SRC

Rewrite to:
#+BEGIN_SRC haskell
functionC' x y = case x > y of
  True  -> x
  False -> y
#+END_SRC
*** 2.

Given:
#+BEGIN_SRC haskell
ifEvenAdd2 n = if even n then (n + 2) else n
#+END_SRC

Rewrite to:
#+BEGIN_SRC haskell
ifEvenAdd2' n = case even n of
  True  -> n + 2
  False -> n
#+END_SRC
*** 3.

Given:
#+BEGIN_SRC haskell
nums x = case compare x 0 of
  LT -> -1
  GT -> 1
#+END_SRC

Rewrite to:
#+BEGIN_SRC haskell
nums' x = case compare x 0 of
  LT -> -1
  GT -> 1
  _  -> 0
#+END_SRC

to cover all cases

* 7.6 Higher-order functions

Higher-order functions are functions that accept functions as arguments

** Ex: Artful Dodgy

Given:
#+BEGIN_SRC haskell
dodgy x y = x + y * 10
oneIsOne = dodgy 1
oneIsTwo = (flip dodgy) 2
#+END_SRC

Adding types, we get:
#+BEGIN_SRC haskell
dodgy :: Num a => a -> a -> a
dodgy x y = x + y * 10

oneIsOne = dodgy 1
oneIsTwo = (flip dodgy) 2
#+END_SRC

*** 2.
dodgy 1 1 = 11

*** 3.
dodgy 2 2 = 22

*** 4.
dodgy 1 2 = 21

*** 5.
dodgy  2 1 = 12

*** 6.
oneIsOne 1 = 11

*** 7.
oneIsOne 2 = 21

*** 8.
oneIsTwo 1 = 21

*** 9.
oneIsTwo 2 = 22

*** ...

* 7.7 Guards

** Ex: Guard Duty

*** 1.
If we take the given avgGrade:

#+BEGIN_SRC haskell
  avgGrade :: (Fractional a, Ord a) => a -> Char
  avgGrade x
    | y >= 0.9  = 'A'
    | y >= 0.8  = 'B'
    | y >= 0.7  = 'C'
    | y >= 0.59 = 'D'
    | y <  0.59 = 'F'
    where y = x / 100
#+END_SRC

and stick an 'otherwise' at the top, everything will be an A. We can rewrite it like this, though:

#+BEGIN_SRC haskell
  avgGrade :: (Fractional a, Ord a) => a -> Char
  avgGrade x
    | y >= 0.9  = 'A'
    | y >= 0.8  = 'B'
    | y >= 0.7  = 'C'
    | y >= 0.59 = 'D'
    | otherwise = 'F'
    where y = x / 100
#+END_SRC

*** 2.
If we reorder it, as we expect, whatever matches first is returned

*** 3.
Given:
#+BEGIN_SRC haskell
pal xs
    | xs == reverse xs = True
    | otherwise        = False
#+END_SRC

b) pal returns true when xs is a palindrome

*** 4/5.
#+BEGIN_SRC haskell
pal :: Eq a => [a] -> Bool
#+END_SRC

*** 6/7/8.
Given:
#+BEGIN_SRC haskell
  numbers :: (Num a, Ord a) => a -> Integer
  numbers x
      | x < 0   = -1
      | x == 0  = 0
      | x > 0   = 1
#+END_SRC

* 7.8 Function Composition
* 7.9 Pointfree

#+BEGIN_SRC haskell
-- arith2.hs
module Arith2 where

add :: Int -> Int -> Int
add x y = x + y

addPF :: Int -> Int -> Int
addPF = (+)

addOne :: Int -> Int
addOne = \x -> x + 1

addOnePF :: Int -> Int
addOnePF = (+1)

main :: IO ()
main = do
  print (0 :: Int)
  print (add 1 0)
  print (addOne 0)
  print (addOnePF 0)
  print ((addOne . addOne) 0)
  print ((addOnePF . addOne) 0)
  print ((addOne . addOnePF) 0)
  print ((addOnePF . addOnePF) 0)
  print (negate (addOne 0))
  print ((negate . addOne) 0)
  print ((addOne . addOne . addOne
    . negate . addOne) 0)
#+END_SRC
* 7.10 Demonstrating Composition
* Chapter Exercises
** Multiple Choice
*** 1.
a polymorphic function d) may resolve to values of different types, depending on inputs
*** 2.
Two functions names ~f~ and ~g~ have types ~Char -> String~ and ~String -> [String]~ respectively. The
composed function ~g . f~ has type b) ~Char -> [String]~
*** 3.
A function ~f~ has type ~Ord a = a -> a -> Bool~ and we apply it to one numeric value. The type is now
d) ~(Ord a, Num a) => a -> Bool~
*** 4.
A function with the type ~(a -> b) -> c~  b) is an HOF
*** 5.
Given the following definition of f:

#+BEGIN_SRC haskell
f :: a -> a
f x = x
#+END_SRC

the type of ~f True~ is ~f True :: Bool~

** Let's write code

*** 1.
Given:

#+BEGIN_SRC haskell
  tensDigit :: Integral a => a -> a
  tensDigit x = d
    where xLast = x `div` 10
          d     = xLast `mod` 10
#+END_SRC

**** a)
rewritten with ~divMod~, we get:

#+BEGIN_SRC haskell
tensDigit' :: Integral a => a -> a
tensDigit' x = d
  where (y, _) = divMod x 10
        (_, d) = divMod y 10
#+END_SRC

**** b)
which is the same type as what was given

**** c)

#+BEGIN_SRC haskell
  hunsDigit :: Integral a => a -> a
  hunsDigit x = d
    where (y, _) = divMod x 100
          (_, d) = divMod y 10
#+END_SRC

*** 2.

Implement ~foldBool~ to be a sort of "if Bool then a else a'" sort of thing

Using case:

#+BEGIN_SRC haskell
  foldBool :: a -> a -> Bool -> a
  foldBool x y b = case b of
    True -> x
    _    -> y
#+END_SRC

Using guard:

#+BEGIN_SRC haskell
  foldBool' :: a -> a -> Bool -> a
  foldBool' x y b
    | b == True   = x
    | otherwise   = y
#+END_SRC

*** 3.

#+BEGIN_SRC haskell
  g :: (a -> b) -> (a, c) -> (b, c)
  g f (x, y) = (f x, y)
#+END_SRC

*** 4.

#+BEGIN_SRC haskell
  module Arith4 where

  -- id :: a -> a
  -- id x = x

  roundTrip :: (Show a, Read a) => a -> a
  roundTrip a = read (show a)

  main = do
    print (roundTrip 4)
    print (id 4)
#+END_SRC

*** 5.

#+BEGIN_SRC haskell
  module Arith4 where

  -- id :: a -> a
  -- id x = x

  roundTrip :: (Show a, Read a) => a -> a
  roundTrip a = read (show a)

  roundTripPf :: (Show a, Read a) => a -> a
  roundTripPf = read . show

  main = do
    print (roundTrip 4)
    print (roundTripPf 4)
    print (id 4)
#+END_SRC

*** 6.

#+BEGIN_SRC haskell
  module Arith4 where

  -- id :: a -> a
  -- id x = x

  roundTrip :: (Show a, Read a) => a -> a
  roundTrip a = read (show a)

  roundTripPf :: (Show a, Read a) => a -> a
  roundTripPf = read . show

  roundTripTwoType :: (Show a, Read b) => a -> b
  roundTripTwoType = read . show

  main = do
    print (roundTrip 4)
    print (roundTripPf 4)
    print (roundTripTwoType 4 :: Integer)
    print (id 4)

#+END_SRC
